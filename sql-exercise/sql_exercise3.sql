DROP DATABASE IF EXISTS EXERCISE3;
CREATE DATABASE EXERCISE3;
-- SHOW DATABASES;
USE EXERCISE3;

DROP TABLE IF EXISTS CUSTOMER;
DROP TABLE IF EXISTS PRODUCT;
DROP TABLE IF EXISTS INVOICE;
DROP TABLE IF EXISTS INVOICE_ITEM;

CREATE TABLE PRODUCT (
	ID INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,
    SKU VARCHAR(32),
    PRODUCT_NAME VARCHAR(128),
    PRODUCT_DESCRIPTION TEXT,
    CURRENT_PRICE DECIMAL(8,2),
    QUANTITY_IN_STOCK INTEGER
);

CREATE TABLE CUSTOMER (
	ID INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,
    CUSTOMER_NAME VARCHAR(255) NOT NULL,
    CITY_ID INTEGER NOT NULL,
    CUSTOMER_ADDRESS VARCHAR(255) NOT NULL,
    CONTACT_PERSON VARCHAR(255),
    EMAIL VARCHAR(128) NOT NULL,
    PHONE VARCHAR(128) NOT NULL -- ,
);

CREATE TABLE INVOICE (
	ID INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,
    INVOICE_NUMBER VARCHAR(255),
    CUSTOMER_ID INTEGER NOT NULL,
    USER_ACCOUNT_ID INTEGER NOT NULL,
    TOTAL_PRICE DECIMAL(8, 2) NOT NULL,
    TIME_ISSUED VARCHAR(255),
    TIME_DUE VARCHAR(255),
    TIME_PAID VARCHAR(255),
    TIME_CANCELED VARCHAR(255),
    TIME_REFUNDED VARCHAR(255),
    FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(ID)
);

CREATE TABLE INVOICE_ITEM (
	ID INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,
    INVOICE_ID INTEGER NOT NULL,
    PRODUCT_ID INTEGER NOT NULL,
    QUANTITY INTEGER NOT NULL,
    PRICE DECIMAL(8, 2) NOT NULL,
    LINE_TOTAL_PRICE DECIMAL(8, 2) NOT NULL,
    FOREIGN KEY(INVOICE_ID) REFERENCES INVOICE(ID),
    FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID)
);

INSERT INTO CUSTOMER (CUSTOMER_NAME, CITY_ID, CUSTOMER_ADDRESS, CONTACT_PERSON, EMAIL, PHONE) VALUES
	('Drogerie Wien', 1, 'Deckergasse 15A', 'Emil Steinbach', 'emil@drogeriewien.com', '094234234'),
    ('Cosmetics Store', 4, 'Watling Street 347', 'Jeremy Corbyn', 'jeremy@c-store.org', '093923923'),
    ('Kosmetikstudio', 3, 'Rothenbaumchaussee 53', 'Willy Brandt', 'willy@kosmetikstudio.com', '0941562222'),
    ('Neue Kosmetik', 1, 'Karlsplatz 2', NULL, 'info@neuekosmetik.com', '094109253'),
    ('Bio Kosmetik', 2, 'Motzstrabe 23', 'Clara Zetkin', 'clara@biokosmetik.org', '093825825'),
    ('K-Wien', 1, 'Karntner Strabe 204', 'Maria Rauch-Kallat', 'maria@kwien.org', '093427002'),
    ('Natural Cosmetics', 4, 'Clerkenwell Road 14B', 'Glenda Jackson', 'glena.j@natural-cosmetics.com', '093555123'),
    ('Kosmetik Plus', 2, 'Unter den Linden 1', 'Angela Merkel', 'angela@k-plus.com', '094727727'),
    ('New Line Cosmetics', 4, 'Devonshire Street 92', 'Oliver Cromwell', 'oliver@nlc.org', '093202404');
    
INSERT INTO PRODUCT (SKU, PRODUCT_NAME, PRODUCT_DESCRIPTION, CURRENT_PRICE, QUANTITY_IN_STOCK) VALUES
	('330120', 'Game Of Thrones - URBAN DECAY', 'Game Of Thrones Eyeshadow Palette', 65, 122),
    ('330121', 'Advanced Night Repair - ESTEE LAUDER', 'Advanced Night Repair Synchroized Recovery Complex II', 98, 51),
    ('330122', 'Rose Deep Hydration - FRESH', 'Rose Deep Hydration Facial Toner', 45, 34),
    ('330123', 'Pore-Perfecting Moisturizer - TATCHA', 'Poer-Perfecting Moisturizer & Cleanser Duo', 25, 393),
    ('330124', 'Capture Youth - DIOR', 'Capture Youth Serum Collection', 95, 74),
    ('330125', 'Slice of Glow - GLOW RECIPE', 'Slice of Glow Set', 45, 40),
    ('330126', 'Healthy Skin - KIEHL S SINCE 1851', 'Healthy Skin Squad', 68, 154),
    ('330127', 'Power Pair! - IT COSMETICS', 'IT is Your Skincare Power Pair! Best-Selling Moisturizer & Eye Cream Duo', 80, 0),
    ('330128', 'Dewy Skin Mist - TATCHA', 'Limited Edition Dewy Skin Mist Mini', 20, 281),
    ('330129', 'Silk Pillowcase - SLIP', 'Silk Pillowcase Duo + Scrunchies Kit', 170, 0);
    
INSERT INTO INVOICE (INVOICE_NUMBER, CUSTOMER_ID, USER_ACCOUNT_ID, TOTAL_PRICE, TIME_ISSUED, TIME_DUE, TIME_PAID, TIME_CANCELED, TIME_REFUNDED) VALUES
	('in_25181b07ba800c8d2fc967fe991807d9', 7, 4, 1436, '7/20/2019 3:05:07 PM', '7/20/2019 3:05:07 PM', '7/27/2019 3:24:12 AM', NULL, NULL),
    ('8fba0000fd456b27502b9f81e9d52481', 9, 2, 1000, '7/20/2019 3:07:11 PM', '7/27/2019 3:07:11 PM', '7/20/2019 3:10:32 PM', NULL, NULL),
    ('3b6638118246b6bcfd3dfcd9be487599', 3, 2, 360, '7/20/2019 3:06:15 PM', '7/27/2019 3:06:15 PM', '7/31/2019 9:22:11 PM', NULL, NULL),
    ('dfe7f0a01a682196cac0120a9adbb550', 5, 2, 1675, '7/20/2019 3:06:34 PM', '7/27/2019 3:06:34 PM', NULL, NULL, NULL),
    ('2a24cc2ad4440d698878a0a1a71f70fa', 6, 2, 9500, '7/20/2019 3:06:42 PM', '7/27/2019 3:06:42 PM', NULL, '7/22/2019 11:17:02 AM', NULL),
    ('cbd304872ca6257716bcad8fc43204d7', 4, 2, 150, '7/20/2019 3:08:15 PM', '7/27/2019 3:08:15 PM', '7/27/2019 1:42:45 PM', NULL, '7/27/2019 2:11:20 PM');
    
INSERT INTO INVOICE_ITEM (INVOICE_ID, PRODUCT_ID, QUANTITY, PRICE, LINE_TOTAL_PRICE) VALUES
	(1, 1, 20, 65, 1300),
    (1, 7, 2, 68, 136),
    (1, 5, 10, 100, 1000),
    (3, 10, 2, 180, 360),
    (4, 1, 5, 65, 325),
    (4, 2, 10, 95, 950),
    (4, 5, 4, 100, 400),
    (5, 10, 100, 95, 9500),
    (6, 4, 6, 25, 150);
    
SELECT 'customer' AS TYPE, C.ID, C.CUSTOMER_NAME AS NAME
FROM CUSTOMER C LEFT JOIN INVOICE I ON I.CUSTOMER_ID = C.ID
WHERE I.CUSTOMER_ID IS NULL
UNION
SELECT 'product' AS TYPE, P.ID, P.PRODUCT_NAME AS NAME
FROM PRODUCT P LEFT JOIN INVOICE_ITEM I ON I.PRODUCT_ID = P.ID
WHERE I.PRODUCT_ID IS NULL;

DROP TABLE IF EXISTS EMPLOYEE;
CREATE TABLE EMPLOYEE (
	ID INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
    EMPLOYEE_NAME VARCHAR(30) NOT NULL,
    SALARY NUMERIC(8, 2),
    PHONE NUMERIC(15),
    EMAIL VARCHAR(50),
    DEPT_ID INTEGER NOT NULL
);

DROP TABLE IF EXISTS DEPARTMENT;
CREATE TABLE DEPARTMENT (
	ID INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
    DEPT_CODE VARCHAR(3) NOT NULL,
    DEPT_NAME VARCHAR(200) NOT NULL
);

INSERT INTO EMPLOYEE VALUES
	(1, 'JOHN', 20000, 90234567, 'JOHN@GMAIL.COM', 1),
    (2, 'MARY', 10000, 90234561, 'MARY@GMAIL.COM', 1),
    (3, 'STEVE', 30000, 90234562, 'STEVE@GMAIL.COM', 3),
    (4, 'SUNNY', 40000, 90234563, 'SUNNY@GMAIL.COM', 4);
    
INSERT INTO DEPARTMENT VALUES
	(1, 'HR', 'HUMAN RESOURCES'),
    (2, '9UP', '9UP DEPARTMENT'),
    (3, 'SA', 'SALES DEPARTMENT'),
    (4, 'IT', 'INFORMATION TECHNOLOGY DEPARTMENT');
    
SELECT D.DEPT_CODE, COUNT(E.DEPT_ID) AS NUM_OF_EMPLOYEES
FROM DEPARTMENT D LEFT JOIN EMPLOYEE E ON D.ID = E.DEPT_ID
GROUP BY D.DEPT_CODE
ORDER BY NUM_OF_EMPLOYEES DESC, D.DEPT_CODE;